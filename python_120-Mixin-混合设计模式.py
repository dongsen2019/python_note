# Mixin 混合设计模式

"""
继承需要有一个必要的前提，继承应该是一个 "is-a" 的关系
例如：
    苹果可以去继承水果，因为苹果就是一种水果
    午饭不能继承苹果，因为苹果有有许多午饭没有的属性

    比如 汽车可以继承 交通工具，因为汽车本身就是一个交通工具

交通工具有哪些？
汽车、飞机、直升机、这些都属于 交通工具
那么如何去设计这些类的关系呢？
比如创建一个交通工具类，然后属于交通工具的都继承，再去实现。。。
但是飞机和直升机都有飞行的功能，而汽车并没有，那么再交通工具中如果去定义 飞行这个功能，那就不太合适了
能不能在飞机和直升机类中分别实现 飞行这个功能呢？可以，但是代码又无法重用。

怎么办？
单独去定义交通工具类，和 飞行器 这两个父类，这样飞机和直升机就可以去继承这两个类，但是出现了一个问题？
这样会出现多重继承的关系，又违背了 'is-a' 的原则？
"""


# 交通工具 vehicle
class vehicle():
    # 运输货物
    def huo(self):
        print("运输货物")
    # 搭载乘客
    def ren(self):
        print("搭载乘客")

# 此时去定义一个飞行器的类 Flying，让需要飞行的交通工具，直接继承这个类。可以解决这个问题
# 但是，1.出现类多继承，违背了'is-a'  2.飞行器这个类很容易被误解
# 解决方案也是使用多继承，但是把飞行器这个类，定义成为一个 Mixin 混合类
# 此时就是等于把飞行器这个类，作为了一个扩展的功能，来扩展其他类

# 飞行器
# class Flying():
#     def fly(self):
#         print("可以起飞了。。。")

# 飞行-Mixin
class FlyingMixin():
    def fly(self):
        print("可以起飞了。。。")

# 定义汽类
class cart(vehicle):
    pass

# 定义飞机
class airplane(vehicle,FlyingMixin):
    pass

# 定义直升机
class helicopter(vehicle,FlyingMixin):
    pass



"""
在上面的代码中，虽然直升机和飞机都使用了多继承，也就是继承了FlyingMixin
但是由于 FlyingMixin 类加了 Mixin这个名，就告诉了后面月度代码的人，这个类是一个Mixin类

Mixin表示混入(mix-in)
    Mixin 必须是表示一种功能，而不是一个对象。
    Mixin 的功能必须单一，如果有多个功能，那就多定义几个Mixin类
    python 中的Mixin是通过多继承实现的
    Mixin 这个类通常不单独使用，而是混合到其他类中，去增加功能的
    Mixin 类不依赖子类的实现，即便子类没有继承这个Mixin，子类也能正常运行，可能就是缺少了一些功能。。

使用Mixin混入类的好处？
    1.mixin 这个混入类的设计模式，在不对类的内容修改的前提下，扩展了类的功能
    2.Mixin 混入类为了提高代码的重用性，使得代码结构更加简单清晰
    3.可以根据开发需要任意调整功能（创建新的Mixin类）
    4.使得继承链的关系变得单一和清晰
"""