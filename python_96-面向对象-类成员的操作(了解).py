# lesson 96

# 定义一个汽车的类
class Cart():
    # 属性 ==> 特征 ==> 变量
    color = "白色"    # 表示颜色属性
    brand = "奥迪"    # 表示品牌属性
    pailiang = 2.4   # 表示排列属性

    # 方法 ==> 功能 ==> 函数
    def lahuo(self):
        print("小汽车能拉货")

    def doufeng(self):
        print("小汽车能兜风")

    def bamei(self):
        print("带妹子去嗨。。。")


# 在类的外部，可以直接通过类对成员进行操作

a = Cart()

# 一、类成员属性的操作

# 1.访问类成员属性
print(Cart.brand)

# 2.修改类成员属性
Cart.brand = "宝马"
print(Cart.brand)

# 思考：如果通过类把属性进行类修改，那么再通过这个类实例化的对象，它的属性是什么呢？那之前创建的对象呢？
b = Cart()

print(a.brand)  # 是修改后的结果
print(b.brand)  # 是修改后的结果

# 3.给类添加成员属性
Cart.name = "A6"
print(Cart.name)

# 思考：通过类创建的对象是否也有这个属性呢？之前创建的对象和之后创建的对象都会有这个新的属性
print(b.name)
c = Cart()
print(c.name)

# 4.删除类的成员:在之前和之后创建的对象都不再有这个属性了
del Cart.name
print(a.name)

"""
总结：类成员的操作（不推荐）
    成员属性：
        访问：类名.成员属性名
        修改: 类名.成员属性名 = 新值(此时通过这个类创建的对象都具有这个属性)
        添加：类型.新成员属性 = 新值(此时通过这个类创建的对象都具有这个属性)
        删除：del 类名.成员属性(注意：删除这个类的属性后，这个类创建的对象也没有这几个属性了)
    成员方法：
        访问：类名.成员方法名()
        修改: 类名.成员方法名 = func (此时等于给这个对象创建了一个自己的方法)
        添加：类名.方法名 = func(此时是给这个对象自己新建了一个方法)
        删除：del 类名.方法名(注意：只能删除这个对象自己的方法)
"""


