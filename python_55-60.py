# lesson 55
# 列表的定义

"""
1.可以使用中括号进行定义[]
2.也可以使用list函数 定义
3.在定义列表的元素时，需要在每个元素之间使用逗号，进行分隔。[1,2,3,4]
4.列表中的元素可以是任意类型的，但通常是用于存放同类项目的
"""

lst1 = [1, 2, 3, 4]
lst2 = ['a', 'b', 'c', 'd']

# '+'拼接运算符
print(lst1+lst2)

print(lst1+lst2+[11,22,33])

# '*'重复运算符
print(lst1*3)

# []索引运算符

# 不能通过下标添加元素

# list.append() 在列表尾部添加元素
lst1 = [1, 2, 3, 4]
lst2 = ['a', 'b', 'c', 'd']
lst2.append('ff')
print(lst2)

# list.pop()默认删除尾部元素，可以输出索引号删除指定元素
lst2.pop()
print(lst2)

# len(list) 或者 list.__len()__
print(len(lst2))

# lesson 56
# 列表的切片操作

"""
语法 ==> 列表[开始索引:结束索引:步进值]
        1.列表[开始索引:]  ==> 从开始索引到列表的最后
        2.列表[:结束值]    ==> 从开始到指定的结束索引之前
        3.列表[:] 与 [::] ==>默认值[0:超尾迭代器:1]  所有列表元素的切片
        4.列表[-1::-1] 或 [::-1]倒序输出
"""

lst = [0, 1, 2, 3, 4, 5, 6, 7]
print(lst[0:6])
print(lst[2:])
print(lst[:4])
print(lst[-1::-1])

# 使用切片 对列表数据进行更新和删除
# 将指定的切片替换为对应的数据（可迭代类型对象，拆分每个元素进行赋值）
lst[2:5] = 'abc'  # 容器元素无论多于或少于切片元素，这些元素都占用切片位置
lst[2:7:2] = [11, 22, 33]  # 该方式，容器元素数量必须与切片元素数量相等
print(lst)

# 删除切片元素
lst = [0, 1, 2, 3, 4, 5, 6, 7]
del lst[2:7:2]
print(lst)




